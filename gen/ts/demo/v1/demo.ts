// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "demo/v1/demo.proto" (package "demo.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message demo.v1.SumRequest
 */
export interface SumRequest {
    /**
     * @generated from protobuf field: repeated int64 nums = 1;
     */
    nums: bigint[];
}
/**
 * @generated from protobuf message demo.v1.SumResponse
 */
export interface SumResponse {
    /**
     * @generated from protobuf field: int64 result = 1;
     */
    result: bigint;
}
/**
 * @generated from protobuf message demo.v1.DiffRequest
 */
export interface DiffRequest {
    /**
     * @generated from protobuf field: repeated int64 nums = 1;
     */
    nums: bigint[];
}
/**
 * @generated from protobuf message demo.v1.DiffResponse
 */
export interface DiffResponse {
    /**
     * @generated from protobuf field: int64 result = 1;
     */
    result: bigint;
}
/**
 * @generated from protobuf message demo.v1.ReadFileRequest
 */
export interface ReadFileRequest {
    /**
     * @generated from protobuf field: string path = 1;
     */
    path: string;
}
/**
 * @generated from protobuf message demo.v1.ReadFileResponse
 */
export interface ReadFileResponse {
    /**
     * @generated from protobuf field: bytes content = 1;
     */
    content: Uint8Array;
}
/**
 * @generated from protobuf message demo.v1.VersionRequest
 */
export interface VersionRequest {
}
/**
 * @generated from protobuf message demo.v1.VersionResponse
 */
export interface VersionResponse {
    /**
     * @generated from protobuf field: string version = 1;
     */
    version: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SumRequest$Type extends MessageType<SumRequest> {
    constructor() {
        super("demo.v1.SumRequest", [
            { no: 1, name: "nums", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SumRequest>): SumRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nums = [];
        if (value !== undefined)
            reflectionMergePartial<SumRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumRequest): SumRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 nums */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.nums.push(reader.int64().toBigInt());
                    else
                        message.nums.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 nums = 1; */
        if (message.nums.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.nums.length; i++)
                writer.int64(message.nums[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.SumRequest
 */
export const SumRequest = new SumRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumResponse$Type extends MessageType<SumResponse> {
    constructor() {
        super("demo.v1.SumResponse", [
            { no: 1, name: "result", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SumResponse>): SumResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0n;
        if (value !== undefined)
            reflectionMergePartial<SumResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumResponse): SumResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 result */ 1:
                    message.result = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 result = 1; */
        if (message.result !== 0n)
            writer.tag(1, WireType.Varint).int64(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.SumResponse
 */
export const SumResponse = new SumResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiffRequest$Type extends MessageType<DiffRequest> {
    constructor() {
        super("demo.v1.DiffRequest", [
            { no: 1, name: "nums", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DiffRequest>): DiffRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nums = [];
        if (value !== undefined)
            reflectionMergePartial<DiffRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiffRequest): DiffRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 nums */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.nums.push(reader.int64().toBigInt());
                    else
                        message.nums.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiffRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 nums = 1; */
        if (message.nums.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.nums.length; i++)
                writer.int64(message.nums[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.DiffRequest
 */
export const DiffRequest = new DiffRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiffResponse$Type extends MessageType<DiffResponse> {
    constructor() {
        super("demo.v1.DiffResponse", [
            { no: 1, name: "result", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DiffResponse>): DiffResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0n;
        if (value !== undefined)
            reflectionMergePartial<DiffResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiffResponse): DiffResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 result */ 1:
                    message.result = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiffResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 result = 1; */
        if (message.result !== 0n)
            writer.tag(1, WireType.Varint).int64(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.DiffResponse
 */
export const DiffResponse = new DiffResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadFileRequest$Type extends MessageType<ReadFileRequest> {
    constructor() {
        super("demo.v1.ReadFileRequest", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReadFileRequest>): ReadFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<ReadFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadFileRequest): ReadFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.ReadFileRequest
 */
export const ReadFileRequest = new ReadFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadFileResponse$Type extends MessageType<ReadFileResponse> {
    constructor() {
        super("demo.v1.ReadFileResponse", [
            { no: 1, name: "content", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ReadFileResponse>): ReadFileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.content = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ReadFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadFileResponse): ReadFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes content */ 1:
                    message.content = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes content = 1; */
        if (message.content.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.ReadFileResponse
 */
export const ReadFileResponse = new ReadFileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionRequest$Type extends MessageType<VersionRequest> {
    constructor() {
        super("demo.v1.VersionRequest", []);
    }
    create(value?: PartialMessage<VersionRequest>): VersionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VersionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VersionRequest): VersionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: VersionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.VersionRequest
 */
export const VersionRequest = new VersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionResponse$Type extends MessageType<VersionResponse> {
    constructor() {
        super("demo.v1.VersionResponse", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VersionResponse>): VersionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        if (value !== undefined)
            reflectionMergePartial<VersionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VersionResponse): VersionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VersionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.VersionResponse
 */
export const VersionResponse = new VersionResponse$Type();
/**
 * @generated ServiceType for protobuf service demo.v1.DemoService
 */
export const DemoService = new ServiceType("demo.v1.DemoService", [
    { name: "Sum", options: { "google.api.http": { post: "/sum", body: "*" } }, I: SumRequest, O: SumResponse },
    { name: "Diff", options: {}, I: DiffRequest, O: DiffResponse },
    { name: "ReadFile", options: {}, I: ReadFileRequest, O: ReadFileResponse },
    { name: "Version", options: { "google.api.http": { get: "/version" } }, I: VersionRequest, O: VersionResponse }
]);
