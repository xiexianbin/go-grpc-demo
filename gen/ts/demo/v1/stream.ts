// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "demo/v1/stream.proto" (package "demo.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message demo.v1.StreamPoint
 */
export interface StreamPoint {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 value = 2;
     */
    value: number;
}
/**
 * @generated from protobuf message demo.v1.ListRequest
 */
export interface ListRequest {
    /**
     * @generated from protobuf field: demo.v1.StreamPoint pt = 1;
     */
    pt?: StreamPoint;
}
/**
 * @generated from protobuf message demo.v1.ListResponse
 */
export interface ListResponse {
    /**
     * @generated from protobuf field: demo.v1.StreamPoint pt = 1;
     */
    pt?: StreamPoint;
}
/**
 * @generated from protobuf message demo.v1.RecordRequest
 */
export interface RecordRequest {
    /**
     * @generated from protobuf field: demo.v1.StreamPoint pt = 1;
     */
    pt?: StreamPoint;
}
/**
 * @generated from protobuf message demo.v1.RecordResponse
 */
export interface RecordResponse {
    /**
     * @generated from protobuf field: demo.v1.StreamPoint pt = 1;
     */
    pt?: StreamPoint;
}
/**
 * @generated from protobuf message demo.v1.RouteRequest
 */
export interface RouteRequest {
    /**
     * @generated from protobuf field: demo.v1.StreamPoint pt = 1;
     */
    pt?: StreamPoint;
}
/**
 * @generated from protobuf message demo.v1.RouteResponse
 */
export interface RouteResponse {
    /**
     * @generated from protobuf field: demo.v1.StreamPoint pt = 1;
     */
    pt?: StreamPoint;
}
// @generated message type with reflection information, may provide speed optimized methods
class StreamPoint$Type extends MessageType<StreamPoint> {
    constructor() {
        super("demo.v1.StreamPoint", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StreamPoint>): StreamPoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.value = 0;
        if (value !== undefined)
            reflectionMergePartial<StreamPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamPoint): StreamPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 value */ 2:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.StreamPoint
 */
export const StreamPoint = new StreamPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequest$Type extends MessageType<ListRequest> {
    constructor() {
        super("demo.v1.ListRequest", [
            { no: 1, name: "pt", kind: "message", T: () => StreamPoint }
        ]);
    }
    create(value?: PartialMessage<ListRequest>): ListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequest): ListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* demo.v1.StreamPoint pt */ 1:
                    message.pt = StreamPoint.internalBinaryRead(reader, reader.uint32(), options, message.pt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* demo.v1.StreamPoint pt = 1; */
        if (message.pt)
            StreamPoint.internalBinaryWrite(message.pt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.ListRequest
 */
export const ListRequest = new ListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListResponse$Type extends MessageType<ListResponse> {
    constructor() {
        super("demo.v1.ListResponse", [
            { no: 1, name: "pt", kind: "message", T: () => StreamPoint }
        ]);
    }
    create(value?: PartialMessage<ListResponse>): ListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListResponse): ListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* demo.v1.StreamPoint pt */ 1:
                    message.pt = StreamPoint.internalBinaryRead(reader, reader.uint32(), options, message.pt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* demo.v1.StreamPoint pt = 1; */
        if (message.pt)
            StreamPoint.internalBinaryWrite(message.pt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.ListResponse
 */
export const ListResponse = new ListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordRequest$Type extends MessageType<RecordRequest> {
    constructor() {
        super("demo.v1.RecordRequest", [
            { no: 1, name: "pt", kind: "message", T: () => StreamPoint }
        ]);
    }
    create(value?: PartialMessage<RecordRequest>): RecordRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RecordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordRequest): RecordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* demo.v1.StreamPoint pt */ 1:
                    message.pt = StreamPoint.internalBinaryRead(reader, reader.uint32(), options, message.pt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* demo.v1.StreamPoint pt = 1; */
        if (message.pt)
            StreamPoint.internalBinaryWrite(message.pt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.RecordRequest
 */
export const RecordRequest = new RecordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordResponse$Type extends MessageType<RecordResponse> {
    constructor() {
        super("demo.v1.RecordResponse", [
            { no: 1, name: "pt", kind: "message", T: () => StreamPoint }
        ]);
    }
    create(value?: PartialMessage<RecordResponse>): RecordResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RecordResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordResponse): RecordResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* demo.v1.StreamPoint pt */ 1:
                    message.pt = StreamPoint.internalBinaryRead(reader, reader.uint32(), options, message.pt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecordResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* demo.v1.StreamPoint pt = 1; */
        if (message.pt)
            StreamPoint.internalBinaryWrite(message.pt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.RecordResponse
 */
export const RecordResponse = new RecordResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteRequest$Type extends MessageType<RouteRequest> {
    constructor() {
        super("demo.v1.RouteRequest", [
            { no: 1, name: "pt", kind: "message", T: () => StreamPoint }
        ]);
    }
    create(value?: PartialMessage<RouteRequest>): RouteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RouteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteRequest): RouteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* demo.v1.StreamPoint pt */ 1:
                    message.pt = StreamPoint.internalBinaryRead(reader, reader.uint32(), options, message.pt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* demo.v1.StreamPoint pt = 1; */
        if (message.pt)
            StreamPoint.internalBinaryWrite(message.pt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.RouteRequest
 */
export const RouteRequest = new RouteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteResponse$Type extends MessageType<RouteResponse> {
    constructor() {
        super("demo.v1.RouteResponse", [
            { no: 1, name: "pt", kind: "message", T: () => StreamPoint }
        ]);
    }
    create(value?: PartialMessage<RouteResponse>): RouteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RouteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RouteResponse): RouteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* demo.v1.StreamPoint pt */ 1:
                    message.pt = StreamPoint.internalBinaryRead(reader, reader.uint32(), options, message.pt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RouteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* demo.v1.StreamPoint pt = 1; */
        if (message.pt)
            StreamPoint.internalBinaryWrite(message.pt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message demo.v1.RouteResponse
 */
export const RouteResponse = new RouteResponse$Type();
/**
 * @generated ServiceType for protobuf service demo.v1.StreamService
 */
export const StreamService = new ServiceType("demo.v1.StreamService", [
    { name: "List", serverStreaming: true, options: {}, I: ListRequest, O: ListResponse },
    { name: "Record", clientStreaming: true, options: {}, I: RecordRequest, O: RecordResponse },
    { name: "Route", serverStreaming: true, clientStreaming: true, options: {}, I: RouteRequest, O: RouteResponse }
]);
