// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "demo/v1/stream.proto" (package "demo.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { StreamService } from "./stream";
import type { RouteResponse } from "./stream";
import type { RouteRequest } from "./stream";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RecordResponse } from "./stream";
import type { RecordRequest } from "./stream";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListResponse } from "./stream";
import type { ListRequest } from "./stream";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service demo.v1.StreamService
 */
export interface IStreamServiceClient {
    /**
     * 服务器端流式 RPC
     *
     * @generated from protobuf rpc: List(demo.v1.ListRequest) returns (stream demo.v1.ListResponse);
     */
    list(input: ListRequest, options?: RpcOptions): ServerStreamingCall<ListRequest, ListResponse>;
    /**
     * 客户端流式 RPC
     *
     * @generated from protobuf rpc: Record(stream demo.v1.RecordRequest) returns (demo.v1.RecordResponse);
     */
    record(options?: RpcOptions): ClientStreamingCall<RecordRequest, RecordResponse>;
    /**
     * 双向流式 RPC
     *
     * @generated from protobuf rpc: Route(stream demo.v1.RouteRequest) returns (stream demo.v1.RouteResponse);
     */
    route(options?: RpcOptions): DuplexStreamingCall<RouteRequest, RouteResponse>;
}
/**
 * @generated from protobuf service demo.v1.StreamService
 */
export class StreamServiceClient implements IStreamServiceClient, ServiceInfo {
    typeName = StreamService.typeName;
    methods = StreamService.methods;
    options = StreamService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * 服务器端流式 RPC
     *
     * @generated from protobuf rpc: List(demo.v1.ListRequest) returns (stream demo.v1.ListResponse);
     */
    list(input: ListRequest, options?: RpcOptions): ServerStreamingCall<ListRequest, ListResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListRequest, ListResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * 客户端流式 RPC
     *
     * @generated from protobuf rpc: Record(stream demo.v1.RecordRequest) returns (demo.v1.RecordResponse);
     */
    record(options?: RpcOptions): ClientStreamingCall<RecordRequest, RecordResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecordRequest, RecordResponse>("clientStreaming", this._transport, method, opt);
    }
    /**
     * 双向流式 RPC
     *
     * @generated from protobuf rpc: Route(stream demo.v1.RouteRequest) returns (stream demo.v1.RouteResponse);
     */
    route(options?: RpcOptions): DuplexStreamingCall<RouteRequest, RouteResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RouteRequest, RouteResponse>("duplex", this._transport, method, opt);
    }
}
