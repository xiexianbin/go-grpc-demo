// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies
// @generated from protobuf file "demo/v1/demo.proto" (package "demo.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DemoService } from "./demo";
import type { VersionResponse } from "./demo";
import type { VersionRequest } from "./demo";
import type { ReadFileResponse } from "./demo";
import type { ReadFileRequest } from "./demo";
import type { DiffResponse } from "./demo";
import type { DiffRequest } from "./demo";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SumResponse } from "./demo";
import type { SumRequest } from "./demo";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service demo.v1.DemoService
 */
export interface IDemoServiceClient {
    /**
     * @generated from protobuf rpc: Sum(demo.v1.SumRequest) returns (demo.v1.SumResponse);
     */
    sum(input: SumRequest, options?: RpcOptions): UnaryCall<SumRequest, SumResponse>;
    /**
     * @generated from protobuf rpc: Diff(demo.v1.DiffRequest) returns (demo.v1.DiffResponse);
     */
    diff(input: DiffRequest, options?: RpcOptions): UnaryCall<DiffRequest, DiffResponse>;
    /**
     * @generated from protobuf rpc: ReadFile(demo.v1.ReadFileRequest) returns (demo.v1.ReadFileResponse);
     */
    readFile(input: ReadFileRequest, options?: RpcOptions): UnaryCall<ReadFileRequest, ReadFileResponse>;
    /**
     * @generated from protobuf rpc: Version(demo.v1.VersionRequest) returns (demo.v1.VersionResponse);
     */
    version(input: VersionRequest, options?: RpcOptions): UnaryCall<VersionRequest, VersionResponse>;
}
/**
 * @generated from protobuf service demo.v1.DemoService
 */
export class DemoServiceClient implements IDemoServiceClient, ServiceInfo {
    typeName = DemoService.typeName;
    methods = DemoService.methods;
    options = DemoService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Sum(demo.v1.SumRequest) returns (demo.v1.SumResponse);
     */
    sum(input: SumRequest, options?: RpcOptions): UnaryCall<SumRequest, SumResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SumRequest, SumResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Diff(demo.v1.DiffRequest) returns (demo.v1.DiffResponse);
     */
    diff(input: DiffRequest, options?: RpcOptions): UnaryCall<DiffRequest, DiffResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DiffRequest, DiffResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReadFile(demo.v1.ReadFileRequest) returns (demo.v1.ReadFileResponse);
     */
    readFile(input: ReadFileRequest, options?: RpcOptions): UnaryCall<ReadFileRequest, ReadFileResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadFileRequest, ReadFileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Version(demo.v1.VersionRequest) returns (demo.v1.VersionResponse);
     */
    version(input: VersionRequest, options?: RpcOptions): UnaryCall<VersionRequest, VersionResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<VersionRequest, VersionResponse>("unary", this._transport, method, opt, input);
    }
}
